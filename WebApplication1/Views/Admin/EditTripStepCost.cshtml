@model DomingoDAL.TripStepCost

<div>
    
    @using (Html.BeginForm("SaveTripStepCost", "Admin", new { ReturnUrl = "" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>TripStepCost</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
    
            <div class="form-group">
                @Html.LabelFor(model => model.Destination, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Destination, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Destination, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.TripTemplateId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.TripTemplateId, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.TripTemplateId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TripTemplateStepId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.TripTemplateStepId, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.TripTemplateStepId, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @{
                        var ListOfTypes = new List<SelectListItem>();
                        ListOfTypes.AddRange(new[]{
                            new SelectListItem() { Text = "ACCOMMODATION", Value = "ACCOMMODATION" },
                            new SelectListItem() { Text = "TRANSPORT", Value = "TRANSPORT" },
                            new SelectListItem() { Text = "FOOD", Value = "FOOD" }});
                    }
                    @*@Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.Type, ListOfTypes, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Class, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @{
                        var ListOfClasses = new List<SelectListItem>();
                        ListOfClasses.AddRange(new[]{
                            new SelectListItem() { Text = "LUXURY", Value = "LUXURY" },
                            new SelectListItem() { Text = "STANDARD", Value = "STANDARD" },
                            new SelectListItem() { Text = "ECONOMY", Value = "ECONOMY" }});
                    }
                    @*@Html.EditorFor(model => model.Class, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.Class, ListOfClasses, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Class, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Season, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @{ 
                        var ListOfSeasons = new List<SelectListItem>();
                        ListOfSeasons.AddRange(new[]{
                            new SelectListItem() { Text = "HIGH", Value = "HIGH" },
                            new SelectListItem() { Text = "LOW", Value = "LOW" }});
                    }
                    @*@Html.EditorFor(model => model.Season, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.Season, ListOfSeasons, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Season, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @{ 
                        var ListOfCurrencies = new List<SelectListItem>();
                        ListOfCurrencies.AddRange(new[]{
                            new SelectListItem() { Text = "INR", Value = "INR" },
                            new SelectListItem() { Text = "EUR", Value = "EUR" },
                            new SelectListItem() { Text = "GBP", Value = "GBP" },
                            new SelectListItem() { Text = "USD", Value = "USD" }});
                    }
                    @*@Html.EditorFor(model => model.Currency, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.Currency, ListOfCurrencies, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>

